# -*- coding: utf-8 -*-
"""train_processing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cXSKvO9rdFP64hbZrZ3DAJfYoTIkdt2I
"""

# ===========================
# ðŸš‚ Train Side-View Processing
# ===========================

# Install dependencies
!pip install opencv-python moviepy reportlab

import cv2
import os
import shutil
from moviepy.video.io.VideoFileClip import VideoFileClip
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet

# ===========================
# 1. Setup Paths
# ===========================
train_number = "12309"
input_video = "/content/train_side_view.mp4"  # <-- Upload your video here
output_dir = "/content/Processed_Video"
os.makedirs(output_dir, exist_ok=True)

# ===========================
# 2. Split Video into Coach Segments
# ===========================
cap = cv2.VideoCapture(input_video)
fps = cap.get(cv2.CAP_PROP_FPS)
length = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))

# Rough split every N frames (adjust manually if needed)
frames_per_coach = int(length // 10)  # Assume 10 coaches, adjust later
coach_count = 0
frame_num = 0

success, frame = cap.read()
while success:
    coach_id = frame_num // frames_per_coach + 1
    coach_folder = os.path.join(output_dir, f"{train_number}_{coach_id}")
    os.makedirs(coach_folder, exist_ok=True)

    # Save frames for coverage
    if frame_num % int(fps * 2) == 0:  # every 2 seconds
        frame_path = os.path.join(coach_folder, f"{train_number}_{coach_id}_{frame_num}.jpg")
        cv2.imwrite(frame_path, frame)

    success, frame = cap.read()
    frame_num += 1
    coach_count = max(coach_count, coach_id)

cap.release()
print(f"Total coaches detected (approx): {coach_count}")

# ===========================
# 3. Simple Door Detection (Placeholder)
# ===========================
def detect_doors(image_path):
    img = cv2.imread(image_path)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    edges = cv2.Canny(gray, 50, 150)

    # Find contours (very rough placeholder for door detection)
    contours, _ = cv2.findContours(edges, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
    for c in contours:
        x,y,w,h = cv2.boundingRect(c)
        if 50 < w < 200 and 100 < h < 300:  # crude filter for "door-like" shapes
            cv2.rectangle(img, (x,y), (x+w,y+h), (0,255,0), 2)

    cv2.imwrite(image_path.replace(".jpg", "_det.jpg"), img)

# Apply to one folder (extend loop later)
for folder in os.listdir(output_dir):
    folder_path = os.path.join(output_dir, folder)
    if os.path.isdir(folder_path):
        for file in os.listdir(folder_path):
            if file.endswith(".jpg"):
                detect_doors(os.path.join(folder_path, file))

# ===========================
# 4. Generate PDF Report
# ===========================
report_path = "/content/Final_Report.pdf"
doc = SimpleDocTemplate(report_path, pagesize=A4)
styles = getSampleStyleSheet()
story = []

story.append(Paragraph("ðŸš† Train Coverage Report", styles["Title"]))
story.append(Paragraph(f"Train Number: {train_number}", styles["Normal"]))
story.append(Paragraph(f"Total Coaches Detected: {coach_count}", styles["Normal"]))
story.append(Spacer(1, 20))

for folder in sorted(os.listdir(output_dir)):
    folder_path = os.path.join(output_dir, folder)
    if os.path.isdir(folder_path):
        story.append(Paragraph(f"Coach: {folder}", styles["Heading2"]))
        for file in sorted(os.listdir(folder_path))[:3]:  # add 3 images per coach
            if file.endswith("_det.jpg"):
                story.append(Image(os.path.join(folder_path, file), width=400, height=200))
        story.append(Spacer(1, 12))

doc.build(story)
print("âœ… Report Generated:", report_path)

# ===========================
# ðŸš† Automatic Coach Detection
# ===========================
import cv2, os, numpy as np

input_video = "/content/drive/MyDrive/train_side_view.mp4"  # <-- adjust path

cap = cv2.VideoCapture(input_video)
fps = int(cap.get(cv2.CAP_PROP_FPS))
length = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))

output_dir = "/content/Processed_Video_Auto"
os.makedirs(output_dir, exist_ok=True)

prev_frame = None
frame_num = 0
coach_id = 1
change_threshold = 1e7   # adjust depending on video contrast
frames_collected = []

while True:
    ret, frame = cap.read()
    if not ret:
        break

    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    gray = cv2.GaussianBlur(gray, (5,5), 0)

    if prev_frame is not None:
        diff = cv2.absdiff(gray, prev_frame)
        score = np.sum(diff)

        # Detect large change â†’ new coach boundary
        if score > change_threshold:
            print(f"New coach detected at frame {frame_num}, score={score}")
            coach_id += 1

    # Save every 20th frame into current coach folder
    if frame_num % (fps*2) == 0:
        coach_folder = os.path.join(output_dir, f"coach_{coach_id}")
        os.makedirs(coach_folder, exist_ok=True)
        frame_path = os.path.join(coach_folder, f"{frame_num}.jpg")
        cv2.imwrite(frame_path, frame)

    prev_frame = gray
    frame_num += 1

cap.release()
print(f"âœ… Total coaches detected: {coach_id}")